# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
install.packages("nycflights13")
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
is.data.frame(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
library(dplyr)
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
??flights
nrow(flights)
ncol(flights)
colnames(flights)
?mutate
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flgiths <- mutate(flights, gain_or_loss = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_or_loss = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_or_loss = arr_delay - dep_delay)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(gain_in_air))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(gain_or_loss))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(gain_in_air = arr_delay - dep_delay) %>% arrange(flights, desc(gain_or_loss))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(gain_in_air = arr_delay - dep_delay) %>% arrange(flights, desc(gain_or_loss))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(gain_in_air = arr_delay - dep_delay) %>% arrange(desc(gain_in_air))
# Exercise 4: practicing with dplyr
# Install the `"nycflights13"` package. Load (`library()`) the package.
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_or_loss = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(gain_or_loss))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(gain_or_loss = arr_delay - dep_delay) %>% arrange(desc(gain_or_loss))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_or_loss)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
# On average, did flights to SeaTac gain or loose time?
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
# Install the `"nycflights13"` package. Load (`library()`) the package.
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_or_loss = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(gain_or_loss))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(gain_or_loss = arr_delay - dep_delay) %>% arrange(desc(gain_or_loss))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_or_loss)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
if (mean(flights$gain_or_loss, na.rm = TRUE) > 0) {
paste("On average, flights gained time.")
} else {
paste("On average, flights lost time.")
}
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_flights <- flights %>% select(origin, dest, gain_or_loss) %>% filter(dest == "SEA")
# On average, did flights to SeaTac gain or lose time?
if (mean(seatac_flights$gain_or_loss, na.rm = TRUE) > 0) {
paste("On average, flights gained time.")
} else {
paste("On average, flights lost time.")
}
mean(seatac_flights$gain_or_loss, na.rm = TRUE)
summary_JFK_SEA
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary_JFK_SEA <- filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(avg_air_time <- mean(air_time, na.rm = TRUE),
max_air_time <- max(air_time, na.rm = TRUE),
min_air_time <- min(air_time, na.rm = TRUE)
)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
View(flights)
?group
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
max(dep_delay_by_month, na.rm = TRUE)
filter(dep_delay_by_month, delay == max(delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>% group_by(arr_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>% group_by(dest) %>% summarize(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
View(arr_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>% group_by(dest) %>% summarize(delay = mean(arr_delay, na.rm = TRUE))
View(arr_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>% group_by(dest) %>% summarize(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
View(arr_delay_by_month)
?filter
?filter
# You can look up these airports in the `airports` data frame!
filter(airports, faa = arr_delay_by_month$dest[1])
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
View(airports)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[2])
# Which city was flown to with the highest average speed?
city_highest_speed <- flights %>% mutate(speed = distance/air_time * 60) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
city_highest_speed <- flights %>% mutate(speed = distance / air_time * 60) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(speed, na.rm = TRUE))
city_fasted_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
city_highest_speed <- flights %>% mutate(speed = distance / air_time * 60) %>%
group_by(dest)
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(speed, na.rm = TRUE))
# Which city was flown to with the highest average speed?
city_highest_speed <- flights %>% mutate(speed = distance / air_time * 60) %>%
group_by(dest)
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_highest_speed
city_fasted_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fasted_speed
# Which city was flown to with the highest average speed?
city_highest_speed <- flights %>% mutate(speed = distance / air_time * 60) %>%
group_by(dest)
# Which city was flown to with the highest average speed?
city_highest_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_highest_speed
?group_by
group_by(flights, dest)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arrival_delays <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest)
View(avg_arrival_delays)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arrival_delays <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) #%>%
#mutate(faa = dest)
left_join(airports, by = "faa")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arrival_delays <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
#mutate(faa = dest)
left_join(airports, by = "faa")
rlang::last_error()
rlang::last_trace()
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arrival_delays <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arrival_delays <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
avg_arrival_delays
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
View(smallest_airline_delay)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
View(smallest_airline_delay)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = "carrier")
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_airline_delay
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier")
smallest_airline_delay
View(airliens)
View(airlines)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier")
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier")
filter(avg_delay == min(avg_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier")
filter(avg_delay == min(avg_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == min(avg_delay, na.rm = TRUE))
smallest_airline_delay
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_airline_delay

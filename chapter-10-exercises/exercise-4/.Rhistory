# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
organization
is.data.frame(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants["organization"]
is.data.frame(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
is.data.frame(organization)
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
?mean
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
?count
# How many grants were awarded in 2010?
grants[grants$Grant.start.date,]
# How many grants were awarded in 2010?
grants[grants$Grant.start.date,3]
?grepl
# How many grants were awarded in 2010?
grants[grepl("2010",grants$Grant.start.date), "Grant.start.date"]
# How many grants were awarded in 2010?
grants[grepl("2009",grants$Grant.start.date), "Grant.start.date"]
# How many grants were awarded in 2010?
grants[grepl("2010",grants$Grant.start.date), "Grant.start.date"]
# How many grants were awarded in 2010?
length(grants[grepl("2010",grants$Grant.start.date), "Grant.start.date"])
clear
clc
?clear
??clear
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('../data/female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv', stringsAsFactors = FALSE)
names
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv/', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('./data/female_names.csv/', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('README.md', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('C:\Users\Andrew\Desktop\female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('C:/Users/Andrew/Desktop/female_names.csv', stringsAsFactors = FALSE)
names
View(names)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv', stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('C:/Users/Andrew/OneDrive/Academics (UW)/INFO 201/INFO201/chapter-10-exercises/exercise-5/female_names.csv', stringsAsFactors = FALSE)
View(names)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013", "year"]
names_2013
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013 , ]
names_2013
?mode
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
return(most_popular <- names[names$year == year, ][names[names$year == year, ]$prop == max(names[names$year == year, ]$prop), "name"])
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
return(names_year[names_year$prop == max(names_year$prop), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
round(names[names$year == year & names$name == name, "prop"] * 1000000, 1)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Andrew", 2001)
round(names[names$year == year & names$name == name, "prop"] * 1000000, 0)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
round(names[names$year == year & names$name == name, "prop"] * 1000000, 0)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Andrew", 2001)
round(names[names$year == year & names$name == name, "prop"] * 1000000, -1)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
round(names[names$year == year & names$name == name, "prop"] * 1000000, -1)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Andrew", 2001)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
round(names[names$year == year & names$name == name, "prop"] * 1000000, 0)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Andrew", 2001)
View(names_2013)
